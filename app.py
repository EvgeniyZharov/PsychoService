import psycopg2
from flask import Flask, render_template, request, redirect, url_for, flash, abort, session
from flask_bcrypt import Bcrypt
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
import random


app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.config["SECRET_KEY"] = "supersecretkey"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
DB_NAME = "psycho_db"
DB_USER = "psycho"
DB_PASSWORD = "patric123"
DB_HOST = "193.109.79.119"
DB_PORT = "5432"

courses_data = [
    {
        "id": 1,
        "title": "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –æ–±—â–µ–Ω–∏—è",
        "description": "–£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –ª—é–¥–µ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–±—â–∞—Ç—å—Å—è.",
        "image": "content/image_1.png"
    },
    {
        "id": 2,
        "title": "–†–∞–∑–≤–∏—Ç–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
        "description": "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–∏ –∏ —á—É–∂–∏–µ —ç–º–æ—Ü–∏–∏.",
        "image": "content/image_1.png"
    }
]

lessons_data = {
    1: [
        {
            "id": 101,
            "title": "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é –æ–±—â–µ–Ω–∏—è",
            "text": "–û–±—â–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –æ–±–º–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –º–µ–∂–¥—É –ª—é–¥—å–º–∏...",
            "image": "content/image_1.png",
            "video": "https://www.youtube.com/embed/dQw4w9WgXcQ"
        },
        {
            "id": 102,
            "title": "–í–µ—Ä–±–∞–ª—å–Ω—ã–µ –∏ –Ω–µ–≤–µ—Ä–±–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã",
            "text": "–ù–∞—É—á–∏—Ç–µ—Å—å –ø–æ–Ω–∏–º–∞—Ç—å —è–∑—ã–∫ —Ç–µ–ª–∞ –∏ –∂–µ—Å—Ç–æ–≤.",
            "image": "content/image_1.png",
            "video": "https://www.youtube.com/embed/dQw4w9WgXcQ"
        }
    ],
    2: [
        {
            "id": 201,
            "title": "–ß—Ç–æ —Ç–∞–∫–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?",
            "text": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç (EQ) ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏...",
            "image": "content/image_1.png",
            "video": "https://www.youtube.com/embed/dQw4w9WgXcQ"
        }
    ]
}

# üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤
tests_data = [
    {
        "id": 1,
        "title": "–¢–µ—Å—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞",
        "description": "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –ø–æ–¥–≤–µ—Ä–∂–µ–Ω—ã —Å—Ç—Ä–µ—Å—Å—É –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏.",
        "questions": [
            {
                "id": 101,
                "text": "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è —É—Å—Ç–∞–≤—à–∏–º?",
                "options": ["–†–µ–¥–∫–æ", "–ò–Ω–æ–≥–¥–∞", "–ß–∞—Å—Ç–æ", "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ"]
            },
            {
                "id": 102,
                "text": "–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –≤–∏–¥–∏–º–æ–π –ø—Ä–∏—á–∏–Ω—ã?",
                "options": ["–ù–∏–∫–æ–≥–¥–∞", "–†–µ–¥–∫–æ", "–ò–Ω–æ–≥–¥–∞", "–ß–∞—Å—Ç–æ"]
            }
        ]
    },
    {
        "id": 2,
        "title": "–¢–µ—Å—Ç –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
        "description": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞–µ—Ç–µ —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏ –∏ —ç–º–æ—Ü–∏–∏ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö.",
        "questions": [
            {
                "id": 201,
                "text": "–í—ã –ª–µ–≥–∫–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç–µ —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞?",
                "options": ["–í—Å–µ–≥–¥–∞", "–ß–∞—Å—Ç–æ", "–ò–Ω–æ–≥–¥–∞", "–†–µ–¥–∫–æ"]
            },
            {
                "id": 202,
                "text": "–ú–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏ –≤ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö?",
                "options": ["–î–∞", "–°–∫–æ—Ä–µ–µ –¥–∞", "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç", "–ù–µ—Ç"]
            }
        ]
    }
]

dialog_data = [
    {
        "type": "fact",
        "text": "–§–∞–∫—Ç 1: –õ—é–¥–∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ 60% –ª—É—á—à–µ, —á–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ."
    },
    {
        "type": "question",
        "text": "–ö–∞–∫ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, –ø–æ—á–µ–º—É —Ç–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?",
        "choices": [
            "–ú–æ–∑–≥ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ.",
            "–õ—é–¥–∏ –ª—é–±—è—Ç –∂–∞–ª–æ–≤–∞—Ç—å—Å—è.",
            "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—Å—Ç–æ –±–æ–ª–µ–µ —Ä–µ–¥–∫–∏–µ."
        ]
    },
    {
        "type": "fact",
        "text": "–§–∞–∫—Ç 2: –°—Ä–µ–¥–Ω–∏–π —á–µ–ª–æ–≤–µ–∫ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–∫–æ–ª–æ 35 000 —Ä–µ—à–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å."
    },
    {
        "type": "question",
        "text": "–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è?",
        "choices": [
            "–†–µ–≥—É–ª—è—Ä–Ω—ã–π —Å–æ–Ω –∏ –æ—Ç–¥—ã—Ö.",
            "–í—ã–ø–∏—Ç—å –ø–æ–±–æ–ª—å—à–µ –∫–æ—Ñ–µ.",
            "–ù–∏—á–µ–≥–æ, –≤—Å—ë –¥–µ–ª–∞—é –Ω–∞—É–≥–∞–¥."
        ]
    }
]



def get_db_connection():
    conn = psycopg2.connect(
        dbname=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD,
        host=DB_HOST,
        port=DB_PORT,
        client_encoding="UTF8"
    )
    conn.set_client_encoding('UTF8')
    return conn


bcrypt = Bcrypt(app)
login_manager = LoginManager(app)
login_manager.login_view = "login"


# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç) ---
def create_users_table():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            name VARCHAR(150) NOT NULL,
            email VARCHAR(150) UNIQUE NOT NULL,
            password VARCHAR(150) NOT NULL
        );
    """)
    conn.commit()
    cur.close()
    conn.close()


create_users_table()


# --- –ö–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Flask-Login ---
class User(UserMixin):
    def __init__(self, id, name, email, password):
        self.id = id
        self.name = name
        self.email = email
        self.password = password


# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@login_manager.user_loader
def load_user(user_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id, name, email, password FROM users WHERE id = %s;", (user_id,))
    user_data = cur.fetchone()
    cur.close()
    conn.close()

    if user_data:
        return User(*user_data)
    return None


# --- –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ---
@app.route("/")
def index():
    return render_template("index.html", user=current_user)


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        name = request.form.get("name")
        email = request.form.get("email")
        password = request.form.get("password")
        hashed_password = bcrypt.generate_password_hash(password).decode("utf-8")

        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT * FROM users WHERE email = %s;", (email,))
        existing_user = cur.fetchone()

        if existing_user:
            flash("–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", "danger")
            return redirect(url_for("register"))

        cur.execute(
            "INSERT INTO users (name, email, password) VALUES (%s, %s, %s) RETURNING id;",
            (name, email, hashed_password)
        )
        conn.commit()
        cur.close()
        conn.close()

        flash("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.", "success")
        return redirect(url_for("login"))

    return render_template("register.html")


# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        email = request.form.get("email")
        password = request.form.get("password")

        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT id, name, email, password FROM users WHERE email = %s;", (email,))
        user_data = cur.fetchone()
        cur.close()
        conn.close()

        if user_data and bcrypt.check_password_hash(user_data[3], password):
            user = User(*user_data)
            login_user(user)
            flash("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!", "success")
            return redirect(url_for("dashboard"))
        else:
            flash("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.", "danger")

    return render_template("login.html")


# --- –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@app.route("/profile", methods=["GET", "POST"])
@login_required
def profile():
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –±—Ä–∞—Ç—å –∏–∑ –±–∞–∑—ã)
    courses_progress = {"–ö—É—Ä—Å 1": 80, "–ö—É—Ä—Å 2": 60, "–ö—É—Ä—Å 3": 40}
    tests_results = {"–¢–µ—Å—Ç 1": 90, "–¢–µ—Å—Ç 2": 75, "–¢–µ—Å—Ç 3": 50}
    user_progress_1 = {"–ü–∞—Ä–∞–º–µ—Ç—Ä 1": 90, "–ü–∞—Ä–∞–º–µ—Ç—Ä 2": 60, "–ü–∞—Ä–∞–º–µ—Ç—Ä 3": 75, }

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–¥–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    characteristics = ["–õ–∏–¥–µ—Ä—Å—Ç–≤–æ", "–≠–º–ø–∞—Ç–∏—è", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"]
    radar_data = [random.randint(50, 100) for _ in characteristics]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
    if request.method == "POST":
        new_password = request.form.get("new_password")
        hashed_password = bcrypt.generate_password_hash(new_password).decode("utf-8")

        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("UPDATE users SET password = %s WHERE id = %s;", (hashed_password, current_user.id))
        conn.commit()
        cur.close()
        conn.close()

        flash("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", "success")
        return redirect(url_for("profile"))

    man_type = "Normal man"
    return render_template("profile.html",
                           user=current_user,
                           courses_progress=courses_progress,
                           tests_results=tests_results,
                           characteristics=characteristics,
                           radar_data=radar_data,
                           user_progress_1=user_progress_1,
                           man_type=man_type)


# --- –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
@app.route("/dashboard")
@login_required
def dashboard():
    return render_template("dashboard.html", user=current_user)


# --- –í—ã—Ö–æ–¥ ---
@app.route("/logout")
@login_required
def logout():
    logout_user()
    flash("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.", "info")
    return redirect(url_for("login"))


# --- –ö—É—Ä—Å—ã –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –ª–∏—á–Ω–æ—Å—Ç–∏ ---
@app.route("/courses_theme")
def courses_theme():
    return render_template("courses_theme.html")


# üìë –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ –≤—Å–µ–º–∏ –∫—É—Ä—Å–∞–º–∏
@app.route("/courses")
def courses():
    return render_template("courses.html", courses=courses_data)


# üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —É—Ä–æ–∫–∞–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
@app.route("/course/<int:course_id>")
def course(course_id):
    course = next((c for c in courses_data if c["id"] == course_id), None)
    lessons = lessons_data.get(course_id, [])
    if not course:
        abort(404)
    return render_template("course_lesson.html", course=course, lessons=lessons)


# üìò –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —É—Ä–æ–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —É—Ä–æ–∫–∞–º–∏
@app.route("/course/<int:course_id>/lesson/<int:lesson_id>")
def lesson(course_id, lesson_id):
    lessons = lessons_data.get(course_id, [])
    lesson = next((l for l in lessons if l["id"] == lesson_id), None)
    if not lesson:
        abort(404)

    # –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
    current_index = lessons.index(lesson)
    prev_lesson = lessons[current_index - 1] if current_index > 0 else None
    next_lesson = lessons[current_index + 1] if current_index < len(lessons) - 1 else None

    return render_template("lesson.html", lesson=lesson, prev_lesson=prev_lesson, next_lesson=next_lesson, course_id=course_id)


@app.route("/tests")
def tests():
    return render_template("tests.html", tests=tests_data)


# üìã –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
@app.route("/test/<int:test_id>", methods=["GET", "POST"])
def test(test_id):
    test = next((t for t in tests_data if t["id"] == test_id), None)
    if not test:
        flash("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", "error")
        return redirect(url_for("tests"))

    return render_template("test_page.html", test=test)


# üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ç–µ—Å—Ç
@app.route("/submit_test/<int:test_id>", methods=["POST"])
def submit_test(test_id):
    test = next((t for t in tests_data if t["id"] == test_id), None)
    if not test:
        flash("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", "error")
        return redirect(url_for("tests"))

    answers = {}
    for question in test["questions"]:
        question_id = f"question_{question['id']}"
        answers[question["text"]] = request.form.get(question_id, "–û—Ç–≤–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")

    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    flash("–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!", "success")

    return render_template("test_result.html", test=test, answers=answers)


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∫–∞—Ä—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@app.route("/progress")
def show_progress():
    return render_template("story_map.html")


@app.route("/story", methods=["GET", "POST"])
def story():
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø –¥–∏–∞–ª–æ–≥–∞.
    –ï—Å–ª–∏ —ç—Ç–∞–ø ‚Äî –≤–æ–ø—Ä–æ—Å, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç (POST).
    –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ session['answers'].
    """
    # –¢–µ–∫—É—â–∏–π —à–∞–≥ –¥–∏–∞–ª–æ–≥–∞
    if "step" not in session:
        session["step"] = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å 0
    step = session["step"]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—à—ë–ª –≤—Å—ë
    if step >= len(dialog_data):
        return render_template("story.html", finished=True, answers=session.get("answers", {}))

    current_item = dialog_data[step]

    # –ï—Å–ª–∏ POST-–∑–∞–ø—Ä–æ—Å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å)
    if request.method == "POST":
        user_choice = request.form.get("choice")
        # –°–æ—Ö—Ä–∞–Ω–∏–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if "answers" not in session:
            session["answers"] = []
        session["answers"].append({
            "question": current_item["text"],
            "answer": user_choice
        })
        session["step"] = step + 1
        return redirect(url_for("story"))

    # –ò–Ω–∞—á–µ GET-–∑–∞–ø—Ä–æ—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return render_template("story.html",
                           finished=False,
                           step=step,
                           item=current_item,
                           total=len(dialog_data),
                           answers=session.get("answers", []))


# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    app.run(debug=True)
